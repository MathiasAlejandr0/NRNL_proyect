// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // Use library engine type for better compatibility in various environments
  engineType = "library"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db" // Uses a local SQLite file named dev.db
}


// --- User Model ---
model UserProfile {
  id            String    @id @default(cuid()) // Firebase UID will be used here, but default needed for Prisma
  email         String?   @unique
  displayName   String?
  photoURL      String?
  role          String    @default("attendee") // 'attendee' or 'producer'
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  giveawayEntries GiveawayEntry[]
  giveawayWins    GiveawayWin[]
  tickets         UserTicket[]
}


// --- Event Model ---
model MusicEvent {
  id            String    @id @default(cuid())
  name          String
  artist        String
  artistBio     String?
  venue         String
  venueDetails  String?
  lat           Float     // Latitude
  lng           Float     // Longitude
  dateTime      DateTime
  ticketPrice   Float?    // Nullable for free events
  ticketUrl     String?   // URL to buy tickets
  description   String?
  imageUrl      String    // URL for event image

  // Giveaway fields
  giveawayActive  Boolean   @default(false)
  giveawayEndDate DateTime? // Optional end date for the giveaway
  giveawayTickets Int?      // Number of tickets to giveaway

  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  giveawayEntries GiveawayEntry[]
  giveawayWins    GiveawayWin[]
  tickets         UserTicket[]
}


// --- Giveaway Entry Model ---
model GiveawayEntry {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  enteredAt DateTime @default(now())

  // Relations
  user  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  event MusicEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // Ensure a user can only enter once per event
}


// --- Giveaway Win Model ---
// Tracks which users won which giveaways
model GiveawayWin {
  id        String   @id @default(cuid())
  userId    String
  eventId   String
  eventName String   // Store event name for quick reference
  wonAt     DateTime @default(now())

  // Relations
  user  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  event MusicEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId]) // Ensure only one win record per user/event
}


// --- User Ticket Model ---
// Stores tickets owned by users (both purchased and won)
model UserTicket {
  id            String   @id @default(cuid())
  userId        String
  eventId       String
  eventName     String
  venue         String
  eventDateTime DateTime // Store the specific event date/time for the ticket
  type          String   // 'purchased' or 'giveaway'
  qrCodeData    String   @unique // Unique data for the QR code
  acquiredAt    DateTime @default(now())

  // Relations
  user  UserProfile @relation(fields: [userId], references: [id], onDelete: Cascade)
  event MusicEvent  @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([eventId])
}
